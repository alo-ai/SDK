<h1 id='audio-sdk'>Audio SDK</h1><h2 id='audio-sdk-overview'>Overview</h2>
<p>TODO: Add some text here</p>
<h2 id='audio-sdk-prerequisites'>Prerequisites</h2>
<p>TODO: Add some text here?</p>
<h3 id='audio-sdk-prerequisites-get-an-api-key'>Get an API Key</h3>
<p>TODO: Explain how to get the account credentials</p>
<h3 id='audio-sdk-prerequisites-get-the-javascript-sdk'>Get the Javascript SDK</h3>
<blockquote>
<p>Import the SDK</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="k">import</span> <span class="nx">AloAudio</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">alo-audio-js</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div>
<p><code>npm install --save alo-audio-js</code></p>

<p>TODO: will we also have a CDN version of the SDK?</p>
<h2 id='audio-sdk-connecting-to-the-audio-service'>Connecting to the Audio Service</h2>
<p>In order to instantiate the AloAudio object you are required to provide a number of properties. Once you have defined the properties you instantiate as shown:</p>

<p><code>aloAudio = new AloAudio(props);</code></p>

<p>To connect to the audio service you call the <code>connect()</code> method:</p>

<p><code>aloAudio.connect();</code></p>
<h3 id='audio-sdk-connecting-to-the-audio-service-user-object'>User Object</h3>
<p>TODO: create a User object class (maybe call it Participant instead)</p>

<p>The user object defines the user that will be participating in the audio channels.</p>

<blockquote>
<p>Sample User Object.</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code> <span class="nx">user</span><span class="p">:</span> <span class="p">{</span>
   <span class="nl">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Some unique id</span><span class="dl">"</span><span class="p">,</span>
   <span class="nx">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Some display name for the user</span><span class="dl">"</span><span class="p">,</span>
   <span class="nx">deviceId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Some unique id associated with user's current device</span><span class="dl">"</span>
 <span class="p">}</span>
</code></pre></div>
<table><thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td>Yes</td>
<td>Unique User identifier</td>
</tr>
<tr>
<td>name</td>
<td>No</td>
<td>Name to be displayed in the list of participants for the current user.  If not provided a name will be generated from the user <code>id</code> and <code>deviceId</code></td>
</tr>
<tr>
<td>deviceId</td>
<td>No</td>
<td>Unique device identifier.  If not provided a random id will be generated.</td>
</tr>
</tbody></table>
<h3 id='audio-sdk-connecting-to-the-audio-service-current-channel-object'>Current Channel Object</h3>
<p>TODO: create a Channel object class</p>

<p>The current channel object defines the audio channel that the user is currently participating in.</p>

<blockquote>
<p>Sample Current Channel Object.</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="nx">currentChannel</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Unique id for the channel</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">isIntercom</span><span class="p">:</span> <span class="kc">false</span>
<span class="p">}</span>
</code></pre></div>
<table><thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>id</td>
<td>Yes</td>
<td></td>
<td>Unique alphanumeric channel identifier</td>
</tr>
<tr>
<td>isIntercom</td>
<td>No</td>
<td>false</td>
<td>If true this is a full duplex channel.  Otherwise it is a PTT channel.  TODO: do we want to use the word &quot;intercom&quot; ?</td>
</tr>
<tr>
<td>bcp47Language</td>
<td>No</td>
<td></td>
<td>(TODO: need better naming and list of language codes) Language code used for TTS</td>
</tr>
<tr>
<td>bcp47LanguageTag</td>
<td>No</td>
<td></td>
<td>(TODO: need better naming and list of language codes) Language code used for TTS</td>
</tr>
</tbody></table>
<h3 id='audio-sdk-connecting-to-the-audio-service-instantiation-properties'>Instantiation Properties</h3><div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="kd">function</span> <span class="nx">connectToAudio</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">aloConnections</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">mutexUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;PROVIDED BY ĀLO&gt;</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">audioUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;PROVIDED BY ĀLO&gt;</span><span class="dl">'</span><span class="p">,</span>
      <span class="c1">// TODO: need a better name for this URL to get the user token</span>
      <span class="na">audioRESTUrl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">&lt;PROVIDED BT ALO&gt;</span><span class="dl">'</span>
    <span class="p">};</span>
    <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">12345</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">James Jones</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">deviceId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">abcd-efsg-wqer-qewe</span><span class="dl">"</span>
    <span class="p">};</span>
    <span class="kd">let</span> <span class="nx">channel</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">myChannelId</span><span class="dl">"</span>
    <span class="p">};</span>
    <span class="kd">let</span> <span class="nx">props</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">user</span><span class="p">:</span> <span class="nx">user</span><span class="p">,</span>
      <span class="na">currentChannel</span><span class="p">:</span> <span class="nx">channel</span><span class="p">,</span>
      <span class="na">aloConnections</span><span class="p">:</span> <span class="nx">aloConnections</span><span class="p">,</span>
      <span class="na">ttsEnabled</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">};</span>
    <span class="nx">aloAudio</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AloAudio</span><span class="p">(</span><span class="nx">props</span><span class="p">);</span>
    <span class="nx">aloAudio</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>
    <span class="nx">initializeEventListeners</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="kd">function</span> <span class="nx">initializeEventListeners</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">aloAudio</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">onDisconnect</span><span class="dl">'</span><span class="p">,</span> <span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">onDisconnect:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>
    <span class="p">})</span>

    <span class="nx">aloAudio</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">onConnectionChange</span><span class="dl">'</span><span class="p">,</span> <span class="nx">action</span><span class="p">(</span><span class="nx">e</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">onConnectionChange:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>

      <span class="k">switch</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="nx">AloAudio</span><span class="p">.</span><span class="na">CONNECTION_STATUS_CONNECTED</span><span class="p">:</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ālo audio connected</span><span class="dl">"</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">AloAudio</span><span class="p">.</span><span class="na">CONNECTION_STATUS_DISCONNECTED</span><span class="p">:</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ālo audio disconnected</span><span class="dl">"</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">AloAudio</span><span class="p">.</span><span class="na">CONNECTION_STATUS_ERROR</span><span class="p">:</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ālo audio connection error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">AloAudio</span><span class="p">.</span><span class="na">CONNECTION_STATUS_CONNECTING</span><span class="p">:</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ālo audio connecting</span><span class="dl">"</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nx">AloAudio</span><span class="p">.</span><span class="na">CONNECTION_STATUS_RECONNECT_PENDING</span><span class="p">:</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Ālo audio reconnect pending.  Retrying in </span><span class="dl">"</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">detail</span><span class="p">.</span><span class="nx">pendingRestartSeconds</span><span class="p">);</span>
          <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>

    <span class="p">}));</span>
<span class="p">}</span>
</code></pre></div>

<table><thead>
<tr>
<th>Parameter</th>
<th>Required</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>user</td>
<td>Yes</td>
<td></td>
<td>The <a href="#audio-sdk-connecting-to-the-audio-service-user-object">user</a> object that defines the current user</td>
</tr>
<tr>
<td>currentChannel</td>
<td>No</td>
<td></td>
<td>The <a href="#audio-sdk-connecting-to-the-audio-service-current-channel-object">current channel</a> object defining which channel to join upon connection to the service.  If no channel is provided the user will connect to the audio service but will not immediately join a channel.</td>
</tr>
<tr>
<td>aloConnections</td>
<td>Yes</td>
<td></td>
<td>TBD</td>
</tr>
<tr>
<td>ttsEnabled</td>
<td>No</td>
<td>false</td>
<td>Set this to true if you want the user to hear TTS audio</td>
</tr>
<tr>
<td>audioInputDeviceId</td>
<td>No</td>
<td>This is to be the id of an audio input device.   When specified this is the device that will be used for audio input.  If no device is specified the operating system&#39;s default audio input device will be used.</td>
<td></td>
</tr>
</tbody></table>

<blockquote>
<p>Example onConnectionChange event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;CONNECTING&quot;</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;CONNECTED&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;DISCONNECTED&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Lost connection to the server&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;RECONNECT_PENDING&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Audio Server Reconnect Pending&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">pendingRestartSeconds:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="err">retryCount:</span><span class="w"> </span><span class="mi">3</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='connection-related-events'>Connection Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onConnectionChange</td>
<td>As the connection to the Audio Service is established events showing the following statuses will be dispatched: AloAudio.CONNECTION_STATUS_CONNECTING, AloAudio.CONNECTION_STATUS_CONNECTED, AloAudio.STATUS_NOT_CONNECTED, AloAudio.CONNECTION_STATUS_ERROR, AloAudio.CONNECTION_STATUS_CONNECTED, AloAudio.CONNECTION_STATUS_RECONNECT_PENDING.</td>
</tr>
<tr>
<td>onDisconnect</td>
<td>Once disconnected, either intentionally or due to an error, the onDisconnect event will be dispatched.</td>
</tr>
</tbody></table></p>

<aside class="notice">
After you call the <code>connect()</code> method the Audio Service will start dispatching events that you should add event listeners for&#46;
See <a href="#audio-sdk-handling-events">Handling Events</a> for more information about the types of events that are available.
</aside>
<h2 id='audio-sdk-disconnecting-from-the-audio-service'>Disconnecting from the Audio Service</h2>
<blockquote>
<p>Audio Service Disconnect.</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="nx">aloAudio</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
</code></pre></div>
<p>Invoking the <code>disconnect()</code> method will remove the user from any channel that they are currently participating in.  All connections to the audio service will also be terminated.  You will need to <a href="#audio-sdk-connecting-to-the-audio-service">connect</a> again before attempting to join a channel.</p>

<blockquote>
<p>Example onDisconnect event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">disconnect()</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">called</span><span class="w">
</span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;DISCONNECTED&quot;</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="err">//</span><span class="w"> </span><span class="err">When</span><span class="w"> </span><span class="err">disconnected</span><span class="w"> </span><span class="err">unexpectedly</span><span class="w">
</span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Lost connection to the server&quot;</span><span class="p">,</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='disconnect-related-events'>Disconnect Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onDisconnect</td>
<td>Once disconnected, either intentionally or due to an error, the onDisconnect event will be dispatched.</td>
</tr>
</tbody></table></p>
<h2 id='audio-sdk-join-a-channel'>Join a Channel</h2>
<p>(NOT YET IMPLEMENTED) but can use changeChannel.  TODO: we should probably change the the changeChannel method name to something that conveys that it means &quot;change or join&quot;</p>
<h2 id='audio-sdk-change-channel'>Change Channel</h2>
<blockquote>
<p>Sample Channel Change.</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="nx">aloAudio</span><span class="p">.</span><span class="nx">changeChannel</span><span class="p">({</span><span class="na">id</span><span class="p">:</span> <span class="dl">'</span><span class="s1">myChannelId</span><span class="dl">'</span><span class="p">});</span>
</code></pre></div>
<p>To change the audio channel you invoke the <code>changeChannel()</code> method.</p>

<blockquote>
<p>Example onJoinChannel event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINING&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINED&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINING&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Something went wrong&quot;</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='channel-joining-related-events'>Channel Joining Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onJoinChannel</td>
<td>As the connection to the Audio Service is established events showing the following statuses will be dispatched: AloAudio.CHANNEL_STATUS_JOINING, AloAudio.CHANNEL_STATUS_JOINED, AloAudio.STATUS_FAILED.</td>
</tr>
</tbody></table></p>

<aside class="notice">
After joining a room there are events dispatched about the availablilty of PTT and the Full Duplex microphone&#46;
See <a href="#audio-sdk-push-to-talk-ptt">Push To Talk</a> and <a href="#audio-sdk-full-duplex">Full Duplex</a> for more information.
</aside>
<h2 id='audio-sdk-leave-channel'>Leave Channel</h2>
<p>(NOT YET IMPLEMENTED)</p>
<h2 id='audio-sdk-push-to-talk-ptt'>Push To Talk (PTT)</h2>
<p>TODO: Explain what PTT is - and what &quot;locking (mutex)&quot; means.</p>

<blockquote>
<p>Example onPTTStateChange events payloads</p>
</blockquote>
<div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">"PTT_BUTTON_STATE_AVAILABLE"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">"PTT_BUTTON_STATE_UNAVAILABLE"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<blockquote>
<p>Example events received when pressing the PTT button.</p>
</blockquote>
<div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onPTTLockChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">"PTT_LOCK_ACQUIRED"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">onPTTSpeakerChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">onMuteChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">audioType:</span><span class="w"> </span><span class="s2">"PTT"</span><span class="p">,</span><span class="w">
    </span><span class="err">isMuted:</span><span class="w"> </span><span class="kc">false</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<blockquote>
<p>Example events received when releasing the PTT button.</p>
</blockquote>
<div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onPTTLockChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">"PTT_LOCK_RELEASED"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">onPTTSpeakerChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">user:</span><span class="w"> </span><span class="kc">null</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="err">//</span><span class="w"> </span><span class="err">onMuteChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">audioType:</span><span class="w"> </span><span class="s2">"PTT"</span><span class="p">,</span><span class="w">
    </span><span class="err">isMuted:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h3 id='ptt-related-events'>PTT Related Events</h3>

<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onPTTStateChange</td>
<td>This event will let you know when the PTT button is available (meaning you are connected to an audio channel and no one else is speaking). The possible states are AloAudio.PTT_BUTTON_STATE_AVAILABLE and AloAudio.PTT_BUTTON_STATE_UNAVAILABLE.</td>
</tr>
<tr>
<td>onPTTLockChange</td>
<td>When you successfully acquire the lock to use the PTT there will be an event with the AloAudio.PTT_LOCK_ACQUIRED state.  When the lock is released the state will be AloAudio.PTT_LOCK_RELEASED</td>
</tr>
<tr>
<td>onPTTSpeakerChange</td>
<td>When a user acquires the PTT lock there will be an event containing information about the user that current attains the lock.</td>
</tr>
<tr>
<td>onMuteChange</td>
<td>When you acquire the lock there will be an event stating that you microphone is not muted.  When releasing the lock the event will indicate that your microphone is muted.</td>
</tr>
</tbody></table>
<h2 id='audio-sdk-full-duplex'>Full Duplex</h2>
<p>TODO: Explain what Full Duplex is.</p>

<blockquote>
<p>Example microphone event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onMicStateChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;MIC_STATE_AVAILABLE&quot;</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onMuteChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">audioType:</span><span class="w"> </span><span class="s2">&quot;INTERCOM&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">isMuted:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='full-duplex-related-events'>Full Duplex Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onMicStateChange</td>
<td>This event will let you know when the Full Duplex microphone button is available (meaning you are connected to an audio channel). The possible states are AloAudio.MIC_STATE_AVAILABLE, AloAudio.MIC_STATE_UNAVAILABLE and AloAudio.MIC_STATE_CHANGING_CHANNEL.  MIC_STATE_CHANGING_CHANNEL is a sub status MIC_STATE_UNAVAILABLE meaning you are in the process of changing channels.</td>
</tr>
<tr>
<td>onMuteChange</td>
<td>When call <code>startIntercom()</code> there will be an event stating that you microphone is not muted.  When you call <code>endIntercom()</code> the event will indicate that your microphone is muted.  See <a href="#audio-sdk-mute-and-unmute-audio">Mute and Unmute Audio</a> for more information</td>
</tr>
</tbody></table></p>
<h2 id='audio-sdk-mute-and-unmute-audio'>Mute and Unmute Audio</h2>
<p>When using full duplex audio you have the ability to mute/unmute your microphone with the <code>startIntercom()</code> and <code>endIntercom()</code> methods.</p>

<p>Before allowing the end user to mute/unmute the microphone you should make sure you have received a <code>MIC_STATE_UNAVAILABLE</code> state from the <code>onMicStateChange</code> event.  See <a href="#audio-sdk-full-duplex">Full Duplex</a></p>

<blockquote>
<p>Example mute event payload</p>
</blockquote>

<p><div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">detail</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">audioType</span><span class="p">:</span> <span class="dl">&quot;</span><span class="s2">INTERCOM</span><span class="dl">&quot;</span><span class="p">,</span>
    <span class="na">isMuted</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id='mute-related-events'>Mute Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onMuteChange</td>
<td>After <code>startIntercom()</code> is called there will be an event stating that you microphone is not muted.  When you call <code>endIntercom()</code> the event will indicate that your microphone is muted.</td>
</tr>
</tbody></table></p>

<p>TODO: start/endIntercom are terrible names. Change to mute/unmuteAudio (or something along those lines)</p>
<h2 id='audio-sdk-input-device-selection'>Input Device Selection</h2>
<blockquote>
<p>Example device list retrieval</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="kd">let</span> <span class="nx">devices</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">aloAudio</span><span class="p">.</span><span class="nx">getMediaList</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">listElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">select#availableMicrophones</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">listElement</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

<span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">devices</span><span class="p">[</span><span class="nx">AloAudioSDK</span><span class="p">.</span><span class="nx">MEDIA_DEVICE_LIST_AUDIO_INPUT</span><span class="p">]).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">device</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">inputOption</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">option</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">inputOption</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">device</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="nx">inputOption</span><span class="p">.</span><span class="nx">label</span> <span class="o">=</span> <span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">;</span>
  <span class="nx">inputOption</span><span class="p">.</span><span class="nx">innerText</span> <span class="o">=</span> <span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">;</span>
  <span class="nx">listElement</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">inputOption</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>
<p>Before joining an audio channel you have the option of selecting which audio input device (microphone) to use.  If you do not specify an input device the operating system&#39;s default device will be used.</p>

<p>In order to get the current list of available audio devices you can use the <code>getMediaList()</code> method.</p>

<p>You should also add a listener for the <code>onDeviceListUpdate</code> event.  If input devices change you can update your input device selection.</p>

<blockquote>
<p>Example onDeviceListUpdate event payload</p>
</blockquote>
<div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail</span><span class="w"> </span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="mi">80</span><span class="err">c</span><span class="mi">24043</span><span class="err">a</span><span class="mi">7</span><span class="err">acb</span><span class="mi">547</span><span class="err">b</span><span class="mi">1</span><span class="err">eda</span><span class="mi">7</span><span class="err">f</span><span class="mi">0</span><span class="err">de</span><span class="mi">20</span><span class="err">ea</span><span class="mi">9917e6</span><span class="err">dea</span><span class="mi">90091</span><span class="err">dab</span><span class="mi">7</span><span class="err">a</span><span class="mi">5</span><span class="err">a</span><span class="mi">5258</span><span class="err">f</span><span class="mi">74e91714</span><span class="err">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">"80c24043a7acb547b1eda7f0de20ea9917e6dea90091dab7a5a5258f74e91714"</span><span class="p">,</span><span class="w">
        </span><span class="err">label:</span><span class="w"> </span><span class="s2">""</span><span class="err">Microphone</span><span class="w"> </span><span class="err">(HD</span><span class="w"> </span><span class="err">Webcam</span><span class="w"> </span><span class="err">C</span><span class="mi">615</span><span class="err">)</span><span class="w"> </span><span class="err">(</span><span class="mi">046</span><span class="err">d:</span><span class="mi">082</span><span class="err">c)</span><span class="s2">""</span><span class="p">,</span><span class="w">
        </span><span class="err">type:</span><span class="w"> </span><span class="s2">"audioinput"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="mi">752999</span><span class="err">ac</span><span class="mi">8</span><span class="err">b</span><span class="mi">718</span><span class="err">aa</span><span class="mi">41</span><span class="err">f</span><span class="mi">3</span><span class="err">d</span><span class="mi">2</span><span class="err">a</span><span class="mi">9755</span><span class="err">dfabf</span><span class="mi">2</span><span class="err">b</span><span class="mi">8</span><span class="err">f</span><span class="mi">80</span><span class="err">d</span><span class="mi">613701</span><span class="err">a</span><span class="mi">36</span><span class="err">b</span><span class="mi">487939</span><span class="err">b</span><span class="mi">38</span><span class="err">ab</span><span class="mi">6095</span><span class="err">d:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">"752999ac8b718aa41f3d2a9755dfabf2b8f80d613701a36b487939b38ab6095d"</span><span class="p">,</span><span class="w">
        </span><span class="err">label:</span><span class="w"> </span><span class="s2">"Microphone Array (Realtek(R) Audio)"</span><span class="p">,</span><span class="w">
        </span><span class="err">type:</span><span class="w"> </span><span class="s2">"audioinput"</span><span class="w">
      </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<h3 id='input-device-related-events'>Input Device Related Events</h3>

<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onDeviceListUpdate</td>
<td>This event will let you know the list of available input devices has changed.</td>
</tr>
</tbody></table>

<p>When you instantiate the AloAudio object you can specify the input device id on the <code>audioInputDeviceId</code> property.  See: <a href="#audio-sdk-connecting-to-the-audio-service-instantiation-properties">Instantiation Properties</a></p>

<blockquote>
<p>Example change audio input code</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="nx">aloAudio</span><span class="p">.</span><span class="nx">changeAudioInput</span><span class="p">(</span><span class="nx">deviceId</span><span class="p">);</span>
</code></pre></div>
<p>If you are already in an audio channel you can change your input device with the <code>changeAudioInput</code> method.</p>

<aside class="notice">
If you have specified an audio input device that becomes unavailable (unplugged for example), the audio input will change to the operating system's default device.
</aside>
<h2 id='audio-sdk-handling-channel-participants'>Handling Channel Participants</h2>
<p>TODO: explain what a channel participant is</p>

<p>TODO: Participant should have deviceId if possible</p>

<p>TODO: participant id vs user id is confusing and we need a way to convey the difference (or hide the difference).</p>

<p>TODO: audio sdk should possibly  the same participant id assignment scheme as we use in video sdk</p>

<blockquote>
<p>Example onParticipantsChanged event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">currentParticipantId:</span><span class="w"> </span><span class="s2">&quot;871f35b5-479e-4b99-acba-71ab6fe50768&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
    </span><span class="err">participants:</span><span class="w"> </span><span class="err">Array(</span><span class="mi">2</span><span class="err">)</span><span class="w">
      </span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="err">Participant</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">&quot;871f35b5-479e-4b99-acba-71ab6fe50768&quot;</span><span class="w">
        </span><span class="err">muted:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="err">name:</span><span class="w"> </span><span class="s2">&quot;Jim Jones&quot;</span><span class="w">
        </span><span class="err">userId:</span><span class="w"> </span><span class="s2">&quot;2963&quot;</span><span class="w">
      </span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">Participant</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">&quot;fd8aef24-bbb4-48aa-9d7c-f90d1c30d9a5&quot;</span><span class="w">
        </span><span class="err">muted:</span><span class="w"> </span><span class="kc">false</span><span class="w">
        </span><span class="err">name:</span><span class="w"> </span><span class="s2">&quot;Sally Smith&quot;</span><span class="w">
        </span><span class="err">userId:</span><span class="w"> </span><span class="s2">&quot;6487&quot;</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='channel-participant-related-events'>Channel Participant Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onParticipantsChanged</td>
<td>When you join a channel you will there will be an event that gives you a list of the current channel participants.  While in a given channel a similar event each time a participant enters or leaves the channel.</td>
</tr>
</tbody></table></p>
<h2 id='audio-sdk-text-to-speech-audio'>Text To Speech Audio</h2>
<p>TODO: explain what TTS is all about</p>
<h3 id='audio-sdk-text-to-speech-audio-enabling-tts'>Enabling TTS</h3>
<p>TODO: a better explanation:
When you initialize the AloAudio object one of the optional properties is <code>ttsEnabled</code>.  When you specify a value of <code>true</code> any channel text that is converted to audio in your current channel will be played.</p>
<h3 id='audio-sdk-text-to-speech-audio-specifying-a-tts-language'>Specifying a TTS Language</h3>
<p>TODO: Explain what the language codes/tags are and how to use them</p>
<h2 id='audio-sdk-automatic-reconnects'>Automatic Reconnects</h2>
<p>By default the Audio SDK will automatically try to reconnect if there is any sort of connection issue.</p>

<p>TODO: explain how reconnects work
TODO: explain the option to turn off auto reconnects</p>
<h2 id='audio-sdk-error-messages'>Error Messages</h2><h2 id='audio-sdk-api'>API</h2>
<p>TODO: Summary of all available API methods</p>
<h2 id='audio-sdk-handling-events'>Handling Events</h2>
<p>In order to listen for AloAudio events you need to add event listeners to the AloAudio.events object.  For example:</p>

<p><code>
aloAudio.events.addEventListener(&#39;onDisconnect&#39;, event =&gt; {
      console.log(&quot;onDisconnect:&quot;, event.detail);
})
</code></p>

<aside class="notice">
The event object may contain additional information about the event in <code>event.detail</code>
</aside>

<blockquote>
<p>Sample for handling audio events</p>
</blockquote>
<div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="nx">aloAudio</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">onDisconnect</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">onDisconnect:</span><span class="dl">"</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div>
<p>TODO: Outline all the possible event messages that can be received.</p>

<blockquote>
<p>Example onConnectionChange event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;CONNECTING&quot;</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;CONNECTED&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;DISCONNECTED&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Lost connection to the server&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;RECONNECT_PENDING&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Audio Server Reconnect Pending&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">pendingRestartSeconds:</span><span class="w"> </span><span class="mi">10</span><span class="p">,</span><span class="w">
  </span><span class="err">retryCount:</span><span class="w"> </span><span class="mi">3</span><span class="w">
  </span><span class="err">user:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='connection-related-events'>Connection Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onConnectionChange</td>
<td>As the connection to the Audio Service is established events showing the following statuses will be dispatched: AloAudio.CONNECTION_STATUS_CONNECTING, AloAudio.CONNECTION_STATUS_CONNECTED, AloAudio.STATUS_NOT_CONNECTED, AloAudio.CONNECTION_STATUS_ERROR, AloAudio.CONNECTION_STATUS_CONNECTED, AloAudio.CONNECTION_STATUS_RECONNECT_PENDING.</td>
</tr>
<tr>
<td>onDisconnect</td>
<td>Once disconnected, either intentionally or due to an error, the onDisconnect event will be dispatched.</td>
</tr>
</tbody></table></p>

<blockquote>
<p>Example onDisconnect event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">when</span><span class="w"> </span><span class="err">disconnect()</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">called</span><span class="w">
</span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;DISCONNECTED&quot;</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="err">//</span><span class="w"> </span><span class="err">When</span><span class="w"> </span><span class="err">disconnected</span><span class="w"> </span><span class="err">unexpectedly</span><span class="w">
</span><span class="p">{</span><span class="w">
 </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;ERROR&quot;</span><span class="p">,</span><span class="w">
  </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Lost connection to the server&quot;</span><span class="p">,</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='disconnect-related-events'>Disconnect Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onDisconnect</td>
<td>Once disconnected, either intentionally or due to an error, the onDisconnect event will be dispatched.</td>
</tr>
</tbody></table></p>

<blockquote>
<p>Example onJoinChannel event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINING&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINED&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w"></p>

<p></span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;JOINING&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">message:</span><span class="w"> </span><span class="s2">&quot;Something went wrong&quot;</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='channel-joining-related-events'>Channel Joining Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onJoinChannel</td>
<td>As the connection to the Audio Service is established events showing the following statuses will be dispatched: AloAudio.CHANNEL_STATUS_JOINING, AloAudio.CHANNEL_STATUS_JOINED, AloAudio.STATUS_FAILED.</td>
</tr>
</tbody></table></p>

<h3 id='ptt-related-events'>PTT Related Events</h3>

<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onPTTStateChange</td>
<td>This event will let you know when the PTT button is available (meaning you are connected to an audio channel and no one else is speaking). The possible states are AloAudio.PTT_BUTTON_STATE_AVAILABLE and AloAudio.PTT_BUTTON_STATE_UNAVAILABLE.</td>
</tr>
<tr>
<td>onPTTLockChange</td>
<td>When you successfully acquire the lock to use the PTT there will be an event with the AloAudio.PTT_LOCK_ACQUIRED state.  When the lock is released the state will be AloAudio.PTT_LOCK_RELEASED</td>
</tr>
<tr>
<td>onPTTSpeakerChange</td>
<td>When a user acquires the PTT lock there will be an event containing information about the user that current attains the lock.</td>
</tr>
<tr>
<td>onMuteChange</td>
<td>When you acquire the lock there will be an event stating that you microphone is not muted.  When releasing the lock the event will indicate that your microphone is muted.</td>
</tr>
</tbody></table>

<blockquote>
<p>Example microphone event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onMicStateChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">state:</span><span class="w"> </span><span class="s2">&quot;MIC_STATE_AVAILABLE&quot;</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><div class="highlight"><pre class="highlight json tab-json"><code><span class="err">//</span><span class="w"> </span><span class="err">onMuteChange</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">audioType:</span><span class="w"> </span><span class="s2">&quot;INTERCOM&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">isMuted:</span><span class="w"> </span><span class="kc">true</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='full-duplex-related-events'>Full Duplex Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onMicStateChange</td>
<td>This event will let you know when the Full Duplex microphone button is available (meaning you are connected to an audio channel). The possible states are AloAudio.MIC_STATE_AVAILABLE, AloAudio.MIC_STATE_UNAVAILABLE and AloAudio.MIC_STATE_CHANGING_CHANNEL.  MIC_STATE_CHANGING_CHANNEL is a sub status MIC_STATE_UNAVAILABLE meaning you are in the process of changing channels.</td>
</tr>
<tr>
<td>onMuteChange</td>
<td>When call <code>startIntercom()</code> there will be an event stating that you microphone is not muted.  When you call <code>endIntercom()</code> the event will indicate that your microphone is muted.  See <a href="#audio-sdk-mute-and-unmute-audio">Mute and Unmute Audio</a> for more information</td>
</tr>
</tbody></table></p>

<blockquote>
<p>Example mute event payload</p>
</blockquote>

<p><div class="highlight"><pre class="highlight javascript tab-javascript"><code><span class="p">{</span>
  <span class="nl">detail</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">audioType</span><span class="p">:</span> <span class="dl">&quot;</span><span class="s2">INTERCOM</span><span class="dl">&quot;</span><span class="p">,</span>
    <span class="na">isMuted</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id='mute-related-events'>Mute Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onMuteChange</td>
<td>After <code>startIntercom()</code> is called there will be an event stating that you microphone is not muted.  When you call <code>endIntercom()</code> the event will indicate that your microphone is muted.</td>
</tr>
</tbody></table></p>

<h3 id='input-device-related-events'>Input Device Related Events</h3>

<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onDeviceListUpdate</td>
<td>This event will let you know the list of available input devices has changed.</td>
</tr>
</tbody></table>

<blockquote>
<p>Example onParticipantsChanged event payloads</p>
</blockquote>

<p><div class="highlight"><pre class="highlight json tab-json"><code><span class="p">{</span><span class="w">
  </span><span class="err">detail:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">currentParticipantId:</span><span class="w"> </span><span class="s2">&quot;871f35b5-479e-4b99-acba-71ab6fe50768&quot;</span><span class="p">,</span><span class="w">
    </span><span class="err">channel:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
    </span><span class="err">participants:</span><span class="w"> </span><span class="err">Array(</span><span class="mi">2</span><span class="err">)</span><span class="w">
      </span><span class="mi">0</span><span class="err">:</span><span class="w"> </span><span class="err">Participant</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">&quot;871f35b5-479e-4b99-acba-71ab6fe50768&quot;</span><span class="w">
        </span><span class="err">muted:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="err">name:</span><span class="w"> </span><span class="s2">&quot;Jim Jones&quot;</span><span class="w">
        </span><span class="err">userId:</span><span class="w"> </span><span class="s2">&quot;2963&quot;</span><span class="w">
      </span><span class="mi">1</span><span class="err">:</span><span class="w"> </span><span class="err">Participant</span><span class="w">
        </span><span class="err">id:</span><span class="w"> </span><span class="s2">&quot;fd8aef24-bbb4-48aa-9d7c-f90d1c30d9a5&quot;</span><span class="w">
        </span><span class="err">muted:</span><span class="w"> </span><span class="kc">false</span><span class="w">
        </span><span class="err">name:</span><span class="w"> </span><span class="s2">&quot;Sally Smith&quot;</span><span class="w">
        </span><span class="err">userId:</span><span class="w"> </span><span class="s2">&quot;6487&quot;</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div><h3 id='channel-participant-related-events'>Channel Participant Related Events</h3>
<table><thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead><tbody>
<tr>
<td>onParticipantsChanged</td>
<td>When you join a channel you will there will be an event that gives you a list of the current channel participants.  While in a given channel a similar event each time a participant enters or leaves the channel.</td>
</tr>
</tbody></table></p>
